---
- name: collect docker facts
  docker_facts:
  register: docker_facts

- name: pull image
  command: "docker pull {{blog_data_image}}"
  register: pulled_blog_data_image
  changed_when: "'Downloaded newer image' in pulled_blog_data_image.stdout"

- name: create data container when missing
  docker:
    name: "{{blog_data_container}}"
    image: "{{blog_data_image}}"
    detach: false
    volumes: /ghost/content/data,/ghost/content/images
    state: present
  when: blog_data_container not in containers.keys()

- name: pull image
  command: "docker pull {{blog_image}}"
  register: pulled_blog_image
  changed_when: "'Downloaded newer image' in pulled_blog_image.stdout"

- name: remove blog container on image update
  docker:
    name: "{{blog_container}}"
    image: "{{blog_image}}"
    state: absent
  when: pulled_blog_image|changed or pulled_blog_data_image|changed

- name: backup data container on image update
  docker_volume:
    task: backup
    name: "{{blog_data_container}}"
    target_dir: "/backup"
  register: backup
  when: pulled_blog_image|changed or pulled_blog_data_image|changed

- debug: var=backup.filename
  when: pulled_blog_image|changed or pulled_blog_data_image|changed

- name: remove data container
  docker:
    name: "{{blog_data_container}}"
    image: "{{blog_data_image}}"
    state: absent
  when: backup|changed

- name: create data container on image update
  docker:
    name: "{{blog_data_container}}"
    image: "{{blog_data_image}}"
    detach: false
    volumes: /ghost/content/data,/ghost/content/images
    state: present
  when: backup|changed or pulled_blog_image|changed or pulled_blog_data_image|changed

- name: restore data container
  docker_volume:
    task: restore
    name: "{{blog_data_container}}"
    source_file: "{{backup.filename}}"
  register: restore
  when: backup|changed or (blog_data_container not in containers.keys() and 'filename' in backup)

- debug: var=restore.filename
  when: backup|changed or blog_data_container not in containers.keys()

- name: start blog container
  docker:
    name: "{{blog_container}}"
    image: "{{blog_image}}"
    expose: "{{blog_port_intern}}/tcp"
    volumes_from: "{{blog_data_container}}"
    restart_policy: always
    state: reloaded
