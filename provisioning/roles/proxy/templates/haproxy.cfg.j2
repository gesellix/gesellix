global
{#  debug#}
  maxconn 2000
{#  user  haproxy#}
{#  group haproxy#}
  pidfile /var/run/haproxy.pid
  log   127.0.0.1       local0
  stats socket /var/run/haproxy.sock mode 777
  spread-checks 5
  tune.ssl.default-dh-param 2048
{# todo check browser compatibility (e.g. at ssllabs.com)#}
{#https://mozilla.github.io/server-side-tls/ssl-config-generator/#}
{#https://wiki.mozilla.org/Security/Server_Side_TLS#}
{#  ssl-default-bind-options no-sslv3 no-tls-tickets force-tlsv12#}
{#  ssl-default-bind-options no-sslv3 no-tlsv10#}
  ssl-default-bind-options no-sslv3 no-tls-tickets
{#  ssl-default-bind-ciphers ECDHE+aRSA+AES256+GCM+SHA384:ECDHE+aRSA+AES128+GCM+SHA256:ECDHE+aRSA+AES256+SHA384:ECDHE+aRSA+AES128+SHA256:ECDHE+aRSA+RC4+SHA:ECDHE+aRSA+AES256+SHA:ECDHE+aRSA+AES128+SHA:AES256+GCM+SHA384:AES128+GCM+SHA256:AES128+SHA256:AES256+SHA256:DHE+aRSA+AES128+SHA:RC4+SHA:HIGH:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!RC4#}
  ssl-default-bind-ciphers EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH+aRSA+RC4:EECDH:EDH+aRSA:RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!RC4

defaults
  log global
  mode http
  balance roundrobin
  maxconn 1000
  option httplog
  option abortonclose
  option httpclose
  option forwardfor
  retries 3
  option redispatch
  timeout client  5s
  timeout connect 10s
  timeout server  10s
  option httpchk HEAD /admin?stats HTTP/1.0
  timeout check 5s

listen admin
  bind *:81
  stats enable
  stats uri /admin?stats
  stats refresh 15s
  stats realm stats
  stats auth {{ haproxy.username }}:{{ haproxy.password }}

frontend web
  bind *:80
  bind *:443 ssl crt /haproxy-override/gesellix.net.pem
  redirect scheme https if !{ ssl_fc }
  mode http
  option http-server-close
  option forceclose

  errorfile  503 /haproxy-override/maintenance.http

  # maintenance mode - disabled by default
  acl web_maintenance src --
  acl web_maintenance_ex src --
  use_backend web_maintenance if web_maintenance !web_maintenance_ex

  #acl routing to backend
  acl keepass_path path_beg /keepass

  use_backend keepass if keepass_path
  default_backend blog

backend blog
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request add-header X-Forwarded-Proto https if { ssl_fc }

  server blog ${BLOG_IP}:${BLOG_PORT} check fall 2 rise 2 observe layer7 weight 100

backend keepass
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request add-header X-Forwarded-Proto https if { ssl_fc }

  reqrep ^([^\ ]*\ /)keepass[/]?(.*)     \1\2

  server keepass ${KEEPASS_IP}:${KEEPASS_PORT} weight 100

backend web_maintenance
  mode http
  errorfile  503 /haproxy-override/maintenance.http


#
# https://gist.github.com/sts/62d8dd59221ab68661aa
#
# Control the maintenance page during runtime using the stats socket:
#
# To put the whole site in maintenance mode (for all IPs):
# > add acl #0 0.0.0.0/0
#
# To exclude your own ip, so you are able to test things out:
# > add acl #1 8.8.8.8
#
# To exit maintenance mode again simply remove the mask from #0 again:
# > del acl #0 0.0.0.0/0
#
